package com.application.base.test;

import static org.junit.Assert.*;

import java.util.HashMap;

import org.elasticsearch.action.bulk.BulkItemResponse;
import org.elasticsearch.action.bulk.BulkRequestBuilder;
import org.elasticsearch.action.bulk.BulkResponse;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.delete.DeleteResponse;
import org.elasticsearch.action.get.GetResponse;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.search.SearchType;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.cluster.node.DiscoveryNode;
import org.elasticsearch.common.collect.ImmutableList;
import org.elasticsearch.common.settings.ImmutableSettings;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.common.transport.TransportAddress;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentFactory;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.SearchHits;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.databind.ObjectMapper;

import cn.crxy.es.domain.Person;

/**
 *     <dependency>
			<groupId>org.elasticsearch</groupId>
			<artifactId>elasticsearch</artifactId>
			<version>1.4.4</version>
		</dependency>
 *
 */
public class TestEs {
	
	TransportClient transportClient;
	@Before
	public void testName() throws Exception {
		transportClient = new TransportClient();
		TransportAddress transportAddress = new InetSocketTransportAddress("192.168.1.171",9300);
		transportClient.addTransportAddress(transportAddress);
	}
	
	String index = "zcah";
	String type = "emp";
	/**
	 * 获取操作集群的客户端链接
	 * 工作中建议这样使用
	 * @throws Exception
	 */
	@Test
	public void test1() throws Exception {
		//封装集群的信息，工作中建议把这两个参数都配置了
		Settings settings = ImmutableSettings.settingsBuilder()
				.put("cluster.name", "elasticsearch")//如果集群名称修改了，在这必须显式定义
				.put("client.transport.sniff", true)//表示开启集群的嗅探功能，开启之后，在代码中只需要设置集群中的一部分节点信息即可，es会自动把集群中的其他节点的信息加载进来
				.build();
		
		//通过TransportClient可以和es集群进行通信
		TransportClient transportClient = new TransportClient(settings);
		//指定es集群中节点的ip信息和端口(节点与节点之间通信使用的端口)
		TransportAddress transportAddress = new InetSocketTransportAddress("192.168.1.171",9300);
		TransportAddress transportAddress2 = new InetSocketTransportAddress("192.168.1.172",9300);
		//把es集群中的节点信息添加进来，可以指定一个或者多个，多个的话使用addTransportAddresses方法
		transportClient.addTransportAddresses(transportAddress,transportAddress2);
		
		//获取transportClient链接到的节点
		ImmutableList<DiscoveryNode> connectedNodes = transportClient.connectedNodes();
		for (DiscoveryNode discoveryNode : connectedNodes) {
			System.out.println(discoveryNode.getHostName());
		}
		
		/*//执行查询操作，都是用以prepareXXX开头的方法，最后再调用get方法，表示执行对应的操作并且获取返回的请求信息
		GetResponse response = transportClient.prepareGet(index, type, "10").get();
		String sourceAsString = response.getSourceAsString();
		System.out.println(sourceAsString);*/
	}
	
	
	/**
	 * 下面这几个建立索引的功能，如果数据封装的有对象，建议使用第三种方式添加数据
	 * 如果属性信息没有封装对象，可以使用第二种或者第四种，尽量别使用第一种。
	 * 
	 * 除非其他业务层发送过来的数据是json字符串，那么可以直接使用
	 * 
	 * index-1  json
	 * @throws Exception
	 */
	@Test
	public void test2() throws Exception {
		String jsonstr = "{\"name\":\"hjkj\",\"age\":30}";
		//其实get方法就是封装了execute().actionGet
		IndexResponse response = transportClient.prepareIndex(index, type, "30").setSource(jsonstr).get();
		//IndexResponse response = transportClient.prepareIndex(index, type, "30").setSource(jsonstr).execute().actionGet();
		long version = response.getVersion();
		System.out.println(version);
	}
	
	
	/**
	 * index-2 map
	 * @throws Exception
	 */
	@Test
	public void test3() throws Exception {
		HashMap<String, Object> hashMap = new HashMap<String,Object>();
		hashMap.put("name", "hehe");
		hashMap.put("age", 18);
		IndexResponse indexResponse = transportClient.prepareIndex(index, type, "31").setSource(hashMap).get();
		System.out.println(indexResponse.getVersion());
	}
	
	/**
	 * index-3 对象（bean）
	 * 
	 * <dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>2.1.3</version>
		</dependency>
	 * @throws Exception
	 */
	@Test
	public void test4() throws Exception {
		Person person = new Person();
		person.setName("haha");
		person.setAge(19);
		
		//直接使用对象的时候必须要用这个类把对象中的所有属性信息转换成一个json字符串
		ObjectMapper objectMapper = new ObjectMapper();
		String writeValueAsString = objectMapper.writeValueAsString(person);
		IndexResponse indexResponse = transportClient.prepareIndex(index, type, "32").setSource(writeValueAsString).get();
		System.out.println(indexResponse.getVersion());
	}
	
	
	
	/**
	 * index-4 eshelper
	 * @throws Exception
	 */
	@Test
	public void test5() throws Exception {
		XContentBuilder builder = XContentFactory.jsonBuilder()
				.startObject()//{
				.field("name", "haha")//"name":"value"
				.field("age", 20)
				.endObject();//}
		IndexResponse indexResponse = transportClient.prepareIndex(index, type, "33").setSource(builder).get();
		System.out.println(indexResponse.getVersion());
	}
	
	
	/**
	 * 根据id进行查询
	 * @throws Exception
	 */
	@Test
	public void test6() throws Exception {
		GetResponse getResponse = transportClient.prepareGet(index, type, "34").get();
		System.out.println(getResponse.getSourceAsString());
	}
	
	
	/**
	 * 局部更新
	 * @throws Exception
	 */
	@Test
	public void test7() throws Exception {
		XContentBuilder builder = XContentFactory.jsonBuilder()
				.startObject()
				.field("age", 30)
				.endObject();
		UpdateResponse response = transportClient.prepareUpdate(index, type, "33").setDoc(builder).get();
		System.out.println(response.getVersion());
	}
	
	
	/**
	 * 删除
	 * 根据id删除
	 * 也可以根据查询条件删除满足条件的数据
	 * @throws Exception
	 */
	@Test
	public void test8() throws Exception {
		DeleteResponse deleteResponse = transportClient.prepareDelete(index, type, "33").get();
	}
	
	/**
	 * 获取总数
	 * @throws Exception
	 */
	@Test
	public void test9() throws Exception {
		long count = transportClient.prepareCount(index).get().getCount();
		System.out.println(count);
	}
	
	/**
	 * 批量操作bulk
	 * 
	 * 如果需要批量添加很多数据，使用for循环向bulkBuilder里面添加请求
	 * @throws Exception
	 */
	@Test
	public void test10() throws Exception {
		BulkRequestBuilder bulkBuilder = transportClient.prepareBulk();
		
		//添加数据
		IndexRequest indexRequest = new IndexRequest(index, type, "34");
		indexRequest.source(XContentFactory.jsonBuilder().startObject().field("name","ww").field("age", 10).endObject());
		
		//删除数据
		DeleteRequest deleteRequest = new DeleteRequest(index, type, "33");
		
		
		//封装所有的请求
		bulkBuilder.add(indexRequest );
		bulkBuilder.add(deleteRequest);
		
		BulkResponse bulkResponse = bulkBuilder.get();
		//判断这一批数据有没有执行报错的
		if(bulkResponse.hasFailures()){
			BulkItemResponse[] items = bulkResponse.getItems();
			for (BulkItemResponse bulkItemResponse : items) {
				//打印错误信息
				System.out.println(bulkItemResponse.getFailureMessage());
			}
		}else{
			System.out.println("全部OK");
		}
	}
	
	/**
	 * 查询
	 * @throws Exception
	 */
	@Test
	public void test11() throws Exception {
		SearchResponse searchResponse = transportClient.prepareSearch(index)//指定索引库
				.setTypes(type)//指定类型
				.setQuery(QueryBuilders.matchQuery("name", "zs"))//设置查询条件
				.setSearchType(SearchType.QUERY_THEN_FETCH)//指定查询类型
				.get();
		//获取返回结果，包含数据总数和详细内容
		SearchHits hits = searchResponse.getHits();
		//获取返回数据的总数
		long totalHits = hits.getTotalHits();
		System.out.println("总数："+totalHits);
		
		//获取具体的详细内容
		SearchHit[] hits2 = hits.getHits();
		for (SearchHit searchHit : hits2) {
			System.out.println(searchHit.getSourceAsString());
		}
		
	}
}
